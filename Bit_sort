#include <iostream>
#include <algorithm>
#include <time.h>

using namespace std;

int* CreateArray(int size, int minRange, int maxRange) {
	if (size <= 0) { // проработка исключений, если размер <= 0
		throw 0;

	}

	int* Array = new int[size]; // создали массив размером size
	for (int i = 0; i < size; i++) {
		Array[i] = minRange + rand() % (maxRange - minRange); // заполнили массив нужным нам диапозоном
	}
	return Array;
}


void PrintArray(int* Array, int size) { // функция вывода
	int i;
	for (i = 0; i < size - 1; ++i)
		cout << Array[i] << " ";
	cout << Array[i] << endl;
}

int bit(int a, int i) {
	return (a >> i) & 1;
}

void bitwise_sort(int* a, int l, int r, int k) {
	if (l >= r || k < 0) // 1. Если l ≥ r или k < 0,
		return; // то выход.
	int i = l, j = r; // 2. Установка начальных значений: i = l, j = r.
	while (i <= j) { // 3. Пока i ≤ j
		while (i <= j && bit(a[i], k) == 0) // 3.1 Пока i ≤ j и в k-ом разряде a[i] ноль,
			i++; // i++;
		while (i <= j && bit(a[j], k) == 1) // 3.2 Пока i ≤ j и в k-ом разряде a[j] единица,
			j--; // j--.
		if (i < j) { // 3.3 Если i < j,
			swap(a[i], a[j]); // то a[i] ↔ a[j],
			++i; // i++,
			--j; // j--.
		}
	}
	bitwise_sort(a, l, j, k - 1); // 4. Выполняем эту же процедуру для фрагмента [l, j] по k - 1 разряду.
	bitwise_sort(a, i, r, k - 1); // 5. Выполняем эту же процедуру для фрагмента [i, r] по k - 1 разряду.
}


bool CheckArray(int *Array, int size) { // функция проверки, отсортирован ли массив
	bool ok = true;
	if (Array != NULL) {

		for (int i = 0; i < size - 1; ++i)
			if (Array[i] > Array[i + 1])
				return false;

		return true;
	}

}

int main() {
	setlocale(LC_ALL, "Russian");
	srand(time(NULL));
	int size;// размер массива
	int *Array = NULL;
	cout << "size = ";

	try
	{
		cin >> size;
		Array = CreateArray(size, 0, 1000);
		PrintArray(Array, size);
		int k = 0;
		for (int i = 0; i < size; ++i)
			k = max(k, (int)log2(Array[i]));
		bitwise_sort(Array, 0, size - 1, k);
		PrintArray(Array, size);

		if (!CheckArray(Array, size))
			cout << "Массив не отсортирован" << endl;
		else
			cout << "Массив отсортирован" << endl;

	}
	catch (int i)
	{
		switch (i)
		{
		case 0:
			cout << "Размер недопустимых значений" << endl;
		}
	}

	delete Array;
	system("pause");
	return 0;
}
